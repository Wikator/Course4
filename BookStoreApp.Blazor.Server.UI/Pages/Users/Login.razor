@page "/users/login"
@inject IAuthenticationService AuthService;
@inject NavigationManager NavigationManager;

<h3>Login</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div>
    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="LoginModel.Email" />
                <ValidationMessage For="@(() => LoginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="LoginModel.Password" />
                <ValidationMessage For="@(() => LoginModel.Password)" />
            </div>
            
            <button type="submit" class="btn btn-primary">Login</button>
            
        </EditForm>
</div>

@code {
    LoginUserDto LoginModel = new();
    string message = string.Empty;

    public async Task HandleLogin()
    {
        try
        {
            var response = await AuthService.AuthenticateAsync(LoginModel);

            if (response)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                message = "Invalid login attempt";
            }
        }
        catch (ApiException ex)
        {
            message = ex.Response;
        }
    }
}