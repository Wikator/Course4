@page "/users/Register"
@inject IClient HttpClient;
@inject NavigationManager NavigationManager;

<h3>Register New Account</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div>
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText id="email" class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label for="first-name">First Name</label>
            <InputText id="first-name" class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label for="last-name">Last Name</label>
            <InputText id="last-name" class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>
        
        <button type="submit" class="btn btn-primary">Register</button>
        
    </EditForm>
</div>

@code {
    UserDto RegistrationModel = new();
    string message = string.Empty;
    
    private async Task HandleRegistration()
    {
        try
        {
            await HttpClient.RegisterAsync(RegistrationModel);
            NavigationManager.NavigateTo("/users/login");
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode is >= 200 and < 300)
            {
                NavigationManager.NavigateTo("/users/login");
                return;
            }
            message = ex.Response;
        }
    }
}
